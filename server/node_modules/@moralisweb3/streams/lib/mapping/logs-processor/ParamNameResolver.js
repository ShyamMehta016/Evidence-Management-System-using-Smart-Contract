"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParamNameResolver = void 0;
var ParamNameResolver = /** @class */ (function () {
    function ParamNameResolver(restrictedNames) {
        this.restrictedNames = restrictedNames;
        this.usedNames = [];
    }
    ParamNameResolver.prototype.iterate = function (object, callback) {
        var _this = this;
        // We need to always keep parameters in the same order
        // because the RowParamNameResolver is order-sensitive.
        var sortedNames = Object.keys(object).sort(function (a, b) { return a.localeCompare(b); });
        sortedNames.forEach(function (name) {
            var safeName = _this.resolve(name);
            callback(safeName, object[name]);
        });
    };
    ParamNameResolver.prototype.resolve = function (name) {
        if (this.isUsed(name)) {
            do {
                name = "_".concat(name);
            } while (this.isUsed(name));
        }
        this.usedNames.push(name);
        return name;
    };
    ParamNameResolver.prototype.isUsed = function (name) {
        return this.restrictedNames.includes(name) || this.usedNames.includes(name);
    };
    return ParamNameResolver;
}());
exports.ParamNameResolver = ParamNameResolver;
//# sourceMappingURL=ParamNameResolver.js.map