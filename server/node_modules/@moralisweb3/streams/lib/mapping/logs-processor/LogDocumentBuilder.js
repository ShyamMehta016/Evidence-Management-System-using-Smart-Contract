"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogDocumentBuilder = void 0;
var LogDocumentId_1 = require("./LogDocumentId");
var LogDocumentValueFormatter_1 = require("./LogDocumentValueFormatter");
var ParamNameResolver_1 = require("./ParamNameResolver");
var paramNames = [
    'id',
    'name',
    'logIndex',
    'transactionHash',
    'address',
    'blockHash',
    'blockTimestamp',
    'blockNumber',
    'confirmed',
    'chainId',
];
var restrictedParamNames = __spreadArray(__spreadArray([], paramNames, true), [
    // Some extra names
    '_id',
    'uniqueId',
    'updatedAt',
    'createdAt',
    'user',
    'userId',
], false);
var LogDocumentBuilder = /** @class */ (function () {
    function LogDocumentBuilder() {
    }
    LogDocumentBuilder.build = function (log, parsedLog, block, confirmed, chainId) {
        var nameResolver = new ParamNameResolver_1.ParamNameResolver(restrictedParamNames);
        var chain = Number(chainId);
        var document = {
            id: LogDocumentId_1.LogDocumentId.create(chain, log.transactionHash, log.logIndex),
            name: parsedLog.name,
            logIndex: parseInt(log.logIndex, 10),
            transactionHash: log.transactionHash,
            address: log.address,
            blockHash: block.hash,
            blockTimestamp: parseInt(block.timestamp, 10),
            blockNumber: parseInt(block.number, 10),
            confirmed: confirmed,
            chainId: chain,
        };
        nameResolver.iterate(parsedLog.params, function (safeParamName, paramValue) {
            document[safeParamName] = LogDocumentValueFormatter_1.LogDocumentValueFormatter.format(paramValue);
        });
        return document;
    };
    return LogDocumentBuilder;
}());
exports.LogDocumentBuilder = LogDocumentBuilder;
//# sourceMappingURL=LogDocumentBuilder.js.map